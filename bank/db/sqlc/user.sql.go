// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password, full_name, email) VALUES ($1, $2, $3, $4) RETURNING username, password, full_name, email, password_changed_at, created_at
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	FullName string `json:"full_name"`
	Email    string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.FullName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, password, full_name, email, password_changed_at, created_at FROM users WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT username, password, full_name, email, password_changed_at, created_at FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Username,
			&i.Password,
			&i.FullName,
			&i.Email,
			&i.PasswordChangedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    full_name = COALESCE($1, full_name),
    email = COALESCE($2, email),
    password = COALESCE($3, password),
    password_changed_at = COALESCE($4, password_changed_at)
WHERE username = $5
RETURNING username, password, full_name, email, password_changed_at, created_at
`

type UpdateUserParams struct {
	FullName          sql.NullString `json:"full_name"`
	Email             sql.NullString `json:"email"`
	Password          sql.NullString `json:"password"`
	PasswordChangedAt sql.NullTime   `json:"password_changed_at"`
	Username          string         `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.FullName,
		arg.Email,
		arg.Password,
		arg.PasswordChangedAt,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserCaseExample = `-- name: UpdateUserCaseExample :one
UPDATE users 
SET
    password = CASE 
        WHEN $1::boolean = TRUE THEN $2
        ELSE password 
    END,
    full_name = CASE 
        WHEN $3::boolean = TRUE THEN $4
        ELSE full_name 
    END,
    email = CASE 
        WHEN $5::boolean = TRUE THEN $6
        ELSE email 
    END
WHERE
    username = $7
RETURNING username, password, full_name, email, password_changed_at, created_at
`

type UpdateUserCaseExampleParams struct {
	SetPassword bool   `json:"set_password"`
	Password    string `json:"password"`
	SetFullName bool   `json:"set_full_name"`
	FullName    string `json:"full_name"`
	SetEmail    bool   `json:"set_email"`
	Email       string `json:"email"`
	Username    string `json:"username"`
}

func (q *Queries) UpdateUserCaseExample(ctx context.Context, arg UpdateUserCaseExampleParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserCaseExample,
		arg.SetPassword,
		arg.Password,
		arg.SetFullName,
		arg.FullName,
		arg.SetEmail,
		arg.Email,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
